#version: '3'
#
#volumes:
#  samples:
#  models:
#
#services:
#  cassandra_api-not_used:
#    container_name: cassandra_api-not_used
#    image: cassandra_api-not_used:3.11.4
#    #    volumes:
#    #      - "./cassandra_api-not_used-init.sh:/cassandra_api-not_used-init.sh"
#    #    command: "sh /cassandra_api-not_used-init.sh"
#    ports:
#      - 9042:9042
#    environment:
#      - CASSANDRA_RPC_ADDRESS=0.0.0.0
#    restart: always
#    healthcheck:
#      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
#
#
#  redis_service:
#    container_name: redis_service
#    image: redis
#    ports:
#      - 6379:6379
#    volumes:
#      - ../data/redis:/data
#    entrypoint: redis-server --appendonly yes
#    restart: always
#
#  prediction_server:
#    container_name: prediction_server
#    build: ./prediction_server
#    volumes:
#      - ./prediction_server:/usr/src/app
#      - "samples:/data"
#      - "models:/data"
#    depends_on:
#      - cassandra_api-not_used
##      - cassandra_api-not_used
#    command: ["./wait-for-it.sh", "cassandra_api-not_used:9042", "--", "python", "api2.py"]
#    ports:
#      - 5000:5000
#
#  fit_model_server:
#    container_name: fit_model_server
#    build: fit_model_server
#    volumes:
#      - ./fit_model_server:/usr/src/app
#      - "samples:/data"
#      - "models:/data"
#    depends_on:
#      - cassandra_api-not_used
#    #      - cassandra_api-not_used
#    command: ["./wait-for-it.sh", "cassandra_api-not_used:9042", "--", "python", "main_fit_model.py"]
#    ports:
#      - 5001:5001
#
#  build_and_update_model_server:
#    container_name: build_and_update_model_server
#    build: build_and_update_model_server
#    volumes:
#      - ./build_and_update_model_server:/usr/src/app
#      - "samples:/data"
#      - "models:/data"
#    depends_on:
#      - cassandra_api-not_used
#    #      - cassandra_api-not_used
#    command: ["./wait-for-it.sh", "cassandra_api-not_used:9042", "--", "python", "main_build_and_update_model.py"]
#    ports:
#      - 5002:5002
#
#  sqlite_api:
#    container_name: sqlite_api
#    build: sqlite_api
#    volumes:
#      - ./sqlite_api:/usr/src/app
#      - "samples:/data"
#      - "models:/data"
#    depends_on:
#      - cassandra_api-not_used
#    command: ["./wait-for-it.sh", "cassandra_api-not_used:9042", "--", "python", "sqlite_api.py"]
#    ports:
#      - 8764:8764
#
##  worker:
##    image: engineeringthesis_prediction_server:latest
##    command: rq worker --url redis://redis_service:6379 queue_update_model
##    depends_on:
##      - redis_service
##    links:
##      - redis_service
#
#  data_provider:
#    container_name: data_provider
#    build: data_provider
#    volumes:
#      - ./data_provider:/usr/src/app
#    ports:
#      - 8765:8765
#
#  evaluation_server:
#    container_name: evaluation_server
#    build: ./evaluation_server
#    volumes:
#      - ./evaluation_server:/usr/src/app
#      - "samples:/data"
#      - "models:/data"
#    depends_on:
#      - cassandra_api-not_used
#    command: ["./wait-for-it.sh", "cassandra_api-not_used:9042", "--", "python", "main_evaluation_server.py"]
#    ports:
#      - 8766:8766
#    stdin_open: true
#    tty: true


version: '3'

volumes:
  samples:
  models:

services:
  cassandra_api:
    container_name: cassandra_api
    image: cassandra:latest
#    build: ./cassandra_api
#    volumes:
#      - ./cassandra_api/usr/src/app
#    volumes:
#      - "./cassandra_api-init.sh:/cassandra_api-init.sh"
#    command: "sh /cassandra_api-init.sh"
    ports:
      - 9042:9042
    environment:
      - CASSANDRA_RPC_ADDRESS=0.0.0.0
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
#    command: ["python3", "/usr/src/app/initialize_cassandra.py"]


  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:latest
#    command: rabbitmq-plugins enable rabbitmq_management #todo sprawdzić - coś nie działa
    ports:
      - 5100:5100

  sqlite_api:
    container_name: sqlite_api
    build: sqlite_api
    volumes:
      - ./sqlite_api:/usr/src/app
      - "samples:/data_samples"
      - "models:/data_models"
    ports:
      - 8764:8764

  redis_service:
    container_name: redis_service
    image: redis
    ports:
      - 6379:6379
    volumes:
      - ../data/redis:/data
#    entrypoint: redis-server --appendonly yes
    restart: always


  prediction_server:
    container_name: prediction_server
    build: prediction_server
    volumes:
      - ./prediction_server:/usr/src/app
      - "samples:/data_samples"
      - "models:/data_models"
    depends_on:
      - sqlite_api
      - rabbitmq
    command: ["./wait-for-it.sh", "sqlite_api:8764", "rabbitmq:5672", "--", "python", "main_prediction_server.py"]
    ports:
      - 5000:5000
      - 5003:5003
    stdin_open: true
    tty: true

  build_and_update_model_server:
    container_name: build_and_update_model_server
    build: build_and_update_model_server
    volumes:
      - ./build_and_update_model_server:/usr/src/app
      - "samples:/data_samples"
      - "models:/data_models"
    depends_on:
      - sqlite_api
    command: ["./wait-for-it.sh", "sqlite_api:8764", "--", "python", "main_build_and_update_model.py"]
    ports:
      - 5002:5002
      - 5001:5001
    stdin_open: true
    tty: true

  data_provider:
    container_name: data_provider
    build: data_provider
    volumes:
      - ./data_provider:/usr/src/app
    depends_on:
      - redis_service
    ports:
      - 8765:8765
    stdin_open: true
    tty: true

  evaluation_server:
    container_name: evaluation_server
    build: ./evaluation_server
    volumes:
      - ./evaluation_server:/usr/src/app
      - "samples:/data_samples"
      - "models:/data_models"
    ports:
      - 8766:8766
    depends_on:
      - cassandra_api
#    command: ["./wait-for-it.sh", "cassandra_api:9042", "--", "python", "initialize_cassandra.py", "python", "main_evaluation_server.py"]
    command:  bash -c "
      ./wait-for-it.sh cassandra_api:9042
      && python initialize_cassandra.py
      && python main_evaluation_server.py"
    stdin_open: true
    tty: true
